import express from 'express';
import bcrypt from 'bcryptjs';
import Joi from 'joi';
import { User, Store, Rating } from '../models.js';
import { authMiddleware, roleCheck } from './middleware.js';
const router = express.Router();
router.use(authMiddleware, roleCheck(['admin']));
const userSchema = Joi.object({
  name: Joi.string().min(20).max(60).required(),
  email: Joi.string().email().required(),
  password: Joi.string().min(8).max(16).pattern(new RegExp('(?=.*[A-Z])(?=.*[!@#$%^&*])')).required(),
  address: Joi.string().max(400).allow('', null),
  role: Joi.string().valid('admin','user','owner').required()
});
router.get('/dashboard', async (req,res)=>{
  const users = await User.count();
  const stores = await Store.count();
  const ratings = await Rating.count();
  res.json({ users, stores, ratings });
});
router.post('/users', async (req,res)=>{
  try{
    const { error, value } = userSchema.validate(req.body);
    if(error) return res.status(400).json({ error: error.details[0].message });
    const { name,email,password,address,role } = value;
    const exists = await User.findOne({ where: { email } });
    if(exists) return res.status(400).json({ error:'Email exists' });
    const hash = await bcrypt.hash(password, 10);
    const user = await User.create({ name,email,password:hash,address,role });
    res.json({ id:user.id, email:user.email, role:user.role });
  }catch(err){ console.error(err); res.status(500).json({ error:'Server error' }); }
});
const storeSchema = Joi.object({
  name: Joi.string().min(3).max(200).required(),
  email: Joi.string().email().allow('', null),
  address: Joi.string().max(400).allow('', null),
  ownerId: Joi.number().integer().allow(null)
});
router.post('/stores', async (req,res)=>{
  try{
    const { error, value } = storeSchema.validate(req.body);
    if(error) return res.status(400).json({ error: error.details[0].message });
    const { name, email, address, ownerId } = value;
    const store = await Store.create({ name, email, address, ownerId: ownerId || null });
    res.json(store);
  }catch(err){ console.error(err); res.status(500).json({ error:'Server error' }); }
});
router.get('/stores', async (req,res)=>{
  const stores = await Store.findAll();
  const result = await Promise.all(stores.map(async s=>{
    const ratings = await Rating.findAll({ where: { storeId: s.id } });
    const avg = ratings.length ? (ratings.reduce((a,b)=>a+b.rating,0)/ratings.length) : 0;
    return { id:s.id, name:s.name, email:s.email, address:s.address, rating:Number(avg.toFixed(2)) };
  }));
  res.json(result);
});
router.get('/users', async (req,res)=>{
  const users = await User.findAll({ attributes: ['id','name','email','address','role'] });
  res.json(users);
});
export default router;
